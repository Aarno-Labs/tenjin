name: not-rocket-science

on:
  push:
    branches: [ "test/**", "test-**" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run every day at 12:39 UTC (mid morning on the US East Coast).
    # Daily runs are done for two reasons:
    # 1. To ensure that GitHub Actions has a fresh cache to use.
    #    See https://docs.github.com/en/actions/reference/dependency-caching-reference#restrictions-for-accessing-a-cache
    # 2. To catch any issues arising from external changes.
    - cron:  '39 12 * * *'
  workflow_dispatch:
    # No particular downsides to enabling manual workflow runs, afaik?

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings -Aclippy::uninlined_format_args"
  XJ_SHOW_CMDS: "1"

jobs:
  not-rocket-science-py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Provision Python via uv
        run: cli/10j provision uv

      - name: Ensure no large files were accidentally added
        run: cli/10j check-repo-file-sizes

      - name: Code linting and formatting checks
        run: cli/10j check-py

  not-rocket-science-tests:
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, macos-14, macos-15]
    runs-on: ${{ matrix.runner }}
    env:
      C2RUST_TESTED_CRATES: "-p c2rust -p c2rust-transpile -p c2rust-ast-printer"
    defaults:
      run:
        shell: bash # GitHub Actions applies pipefail only for explicitly requested bash shell.
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          workspaces: c2rust
          prefix-key: release-
          key: ${{ matrix.runner }}
          cache-workspace-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install tss utility for showing timestamps
        run: |
          loweros=$(uname -s | tr '[:upper:]' '[:lower:]')
          curl --silent --location --output tss https://github.com/kevinburke/tss/releases/download/1.3/tss-${loweros}-amd64 && chmod +x tss

      - name: Provision Rust
        run: cli/10j provision rust 2>&1 | ./tss

      - name: Build c2rust tests
        run: cd c2rust && ../cli/10j cargo test --locked --release $C2RUST_TESTED_CRATES --no-run 2>&1 | ../tss

      - name: Run c2rust unit tests
        run: cd c2rust && ../cli/10j cargo test --locked --release $C2RUST_TESTED_CRATES 2>&1 | ../tss

      - name: Build c2rust binaries
        run: XJ_BUILD_RS_PROFILE=release cli/10j build-rs 2>&1 | ./tss

      - name: Extract Cache Keys
        id: extract
        run: |
          echo "ocaml_key=$(python3 cli/constants.py ocaml-cache-key)" >> $GITHUB_OUTPUT
          echo "codehawk_key=$(python3 cli/constants.py codehawk-cache-key)" >> $GITHUB_OUTPUT
          echo "upstream_c2rust_key=$(python3 cli/constants.py upstream-c2rust-cache-key)" >> $GITHUB_OUTPUT

      # We don't use setup-ocaml because it would compile OCaml in the runner's
      # environment, which has libraries that aren't available to the 10j toolchain.
      # Thus, when our provisioning process would try to compile dune, it would fail.
      # This action restores a previous cache, if we have one, and populates the cache
      # if the workflow succeeds.
      # XREF:ci-opam-paths
      - name: Cache OCaml
        id: cache-ocaml
        uses: actions/cache@v4
        with:
          path: |
            ~/.opam
            ~/.local/bin/opam
          key: ${{ steps.extract.outputs.ocaml_key }}

      # We cache CodeHawk separately because we expect it to change more frequently.
      # CodeHawk-C is not cached because it embeds binaries built from CodeHawk,
      # and is otherwise just a source checkout with no build step.
      - name: Cache CodeHawk
        id: cache-codehawk
        uses: actions/cache@v4
        with:
          path: |
            _local/codehawk
          key: ${{ steps.extract.outputs.codehawk_key }}

      - name: Cache Upstream c2rust
        id: cache-upstream-c2rust
        uses: actions/cache@v4
        with:
          path: |
            _local/upstream-c2rust
          key: ${{ steps.extract.outputs.upstream_c2rust_key }}

      - name: Provision OCaml
        run: cli/10j provision ocaml 2>&1 | ./tss

      - name: Provision Upstream c2rust
        run: cli/10j provision all 2>&1 | ./tss

      - name: Run Tenjin end-to-end tests
        run: XJ_BUILD_RS_PROFILE=release cli/10j check-e2e-smoke-tests 2>&1 | ./tss


  not-rocket-science-rs-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          workspaces: c2rust
          cache-workspace-crates: true
          # No need for key since we only run this on one runner.
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Avoid man-db slowdown when installing ccache
        run: |
          echo 'set man-db/auto-update false' | sudo debconf-communicate > /dev/null
          sudo dpkg-reconfigure man-db

      - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1
        with:
          append-timestamp: false

      - name: Install tss utility for showing timestamps
        run: curl --silent --location --output tss https://github.com/kevinburke/tss/releases/download/1.3/tss-linux-amd64 && chmod +x tss

      - name: Provision Rust
        run: cli/10j provision rust | ./tss
        shell: bash  # GitHub Actions applies pipefail only for explicitly requested bash shell.
        # See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference

      - name: Code linting and formatting checks
        run: CMAKE_CXX_COMPILER_LAUNCHER=ccache cli/10j check-rs |& ./tss
        shell: bash  # GitHub Actions applies pipefail only for explicitly requested bash shell.
