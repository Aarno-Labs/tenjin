---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/os-specific/tenjin_math.linux.rs
input_file: c2rust-transpile/tests/snapshots/os-specific/tenjin_math.c
---
#![allow(
    dead_code,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
use std::process::ExitCode;
extern "C" {
    fn acosf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn asinf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn atanf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn atan2f(__y: core::ffi::c_float, __x: core::ffi::c_float) -> core::ffi::c_float;
    fn cosf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn sinf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn tanf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn coshf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn sinhf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn tanhf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn acoshf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn asinhf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn atanhf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn expf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn frexpf(__x: core::ffi::c_float, __exponent: *mut core::ffi::c_int) -> core::ffi::c_float;
    fn ldexpf(__x: core::ffi::c_float, __exponent: core::ffi::c_int) -> core::ffi::c_float;
    fn logf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn log10f(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn modff(__x: core::ffi::c_float, __iptr: *mut core::ffi::c_float) -> core::ffi::c_float;
    fn expm1f(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn log1pf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn exp2f(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn log2f(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn powf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn sqrtf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn hypotf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn cbrtf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn ceilf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn fabsf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn floorf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn fmodf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn copysignf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn rintf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn nextafterf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn remainderf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn nearbyintf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn roundf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn truncf(__x: core::ffi::c_float) -> core::ffi::c_float;
    fn fdimf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn fmaxf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn fminf(__x: core::ffi::c_float, __y: core::ffi::c_float) -> core::ffi::c_float;
    fn printf(__format: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}
unsafe extern "C" fn test_basic(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += x.abs();
    y += fmodf(x, 3.5f32);
    y += remainderf(x, 2.0f32);
    return y;
}
unsafe extern "C" fn test_exp_log(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += expf(x);
    y += exp2f(x);
    y += expm1f(x);
    y += logf(x.abs() + 1.0f32);
    y += log10f(x.abs() + 1.0f32);
    y += log1pf(x.abs());
    y += log2f(x.abs() + 1.0f32);
    return y;
}
unsafe extern "C" fn test_pow_root(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += powf(x, 2.0f32);
    y += sqrtf(x.abs());
    y += cbrtf(x);
    y += hypotf(x, 2.0f32);
    return y;
}
unsafe extern "C" fn test_trig(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += sinf(x);
    y += cosf(x);
    y += tanf(x);
    y += asinf(fmaxf(fminf(x, 1.0f32), -1.0f32));
    y += acosf(fmaxf(fminf(x, 1.0f32), -1.0f32));
    y += atanf(x);
    y += atan2f(x, 1.0f32);
    return y;
}
unsafe extern "C" fn test_hyperbolic(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += sinhf(x);
    y += coshf(x);
    y += tanhf(x);
    y += asinhf(x);
    y += acoshf(x.abs() + 1.0f32);
    y += atanhf(fmaxf(fminf(x, 0.999f32), -0.999f32));
    return y;
}
unsafe extern "C" fn test_nearby(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += ceilf(x);
    y += x.floor();
    y += truncf(x);
    y += roundf(x);
    y += nearbyintf(x);
    y += rintf(x);
    return y;
}
unsafe extern "C" fn test_remainder_classify(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut y: core::ffi::c_float = 0.0f32;
    y += copysignf(x, -1.0f32);
    y += nextafterf(x, 2.0f32);
    y += fdimf(x, 1.0f32);
    y += fmaxf(x, 1.0f32);
    y += fminf(x, 1.0f32);
    if x.is_nan() as i32 != 0 {
        y += 1.0f32;
    }
    if if x.is_infinite() {
        if x.is_sign_positive() {
            1
        } else {
            -1
        }
    } else {
        0
    } != 0
    {
        y += 2.0f32;
    }
    if x.is_finite() as i32 != 0 {
        y += 3.0f32;
    }
    if x.is_sign_negative() as core::ffi::c_int != 0 {
        y += 4.0f32;
    }
    if x.is_normal() as i32 != 0 {
        y += 5.0f32;
    }
    return y;
}
unsafe extern "C" fn test_modf_split(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut ipart: core::ffi::c_float = 0.;
    let mut frac: core::ffi::c_float = modff(x, &mut ipart);
    return ipart + frac;
}
unsafe extern "C" fn test_frexp_ldexp(mut x: core::ffi::c_float) -> core::ffi::c_float {
    let mut exp: core::ffi::c_int = 0;
    let mut mant: core::ffi::c_float = frexpf(x, &mut exp);
    return ldexpf(mant, exp);
}
unsafe fn main_0() -> core::ffi::c_int {
    let mut x: core::ffi::c_float = 0.75f32;
    let mut sum: core::ffi::c_float = 0.0f32;
    sum += test_basic(x);
    sum += test_exp_log(x);
    sum += test_pow_root(x);
    sum += test_trig(x);
    sum += test_hyperbolic(x);
    sum += test_nearby(x);
    sum += test_remainder_classify(x);
    sum += test_modf_split(x);
    sum += test_frexp_ldexp(x);
    println!(
        "math.h smoke test checksum: {:.6}",
        sum as core::ffi::c_double as f64
    );
    return 0 as core::ffi::c_int;
}
pub fn main() -> ExitCode {
    unsafe { ExitCode::from(main_0() as u8) }
}
